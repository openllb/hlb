import go from fs {
    image "openllb/go.hlb"
}

import mkdocs "./mkdocs.hlb"

group default() {
	crossHLB
}

group crossHLB() {
	go.buildCommonWithOptions src "github.com/openllb/hlb/cmd/hlb" commonBuildArgs option::run{}
}

string version() {
	localRun "git describe --match 'v[0-9]*' --tags --dirty='.dirty' --always | sed 's/^v//'"
}

option::template commonBuildArgs() {
	stringField "goBuildFlags" string {
		template <<~EOM
			-ldflags "-w -s -extldflags -static -X github.com/openllb/hlb.Version={{.version}}"
		EOM with option {
			stringField "version" version
		}
	}
}

fs build() {
	go.buildWithOptions src "github.com/openllb/hlb/cmd/hlb" commonBuildArgs option::run{}
	download "."
}

fs lint() {
	go.lint fs {
		testSrc
		copy fs {
			local ".golangci.yml"
		} "." "."
	}
}

fs test() {
	go.test testSrc
}

fs src() {
	local "." with option {
		includePatterns "**/*.go" "go.mod" "go.sum"
		excludePatterns "**/*_test.go" "vendor"
	}
}

fs testSrc() {
	# TODO update to use merge-op once available upstream
	src
	copy fs {
		local "." with option {
			includePatterns "**/*_test.go"
			excludePatterns "vendor"
		}
	} "." "."
}

fs gen() {
	mkdocs.generatedBuiltin
	download "./builtin/."

	mkdocs.generatedMarkdown
	download "./docs/."
}

fs docs() {
	mkdocs.build
	download "./site/."
}

fs publishDocs() {
	mkdocs.publish
}
