export generatedBuiltin

export generatedMarkdown

export build

export publish

import go from image("openllb/go.hlb")

fs mkdocsMaterial() {
	image "python:alpine"
	run "apk add -U git git-fast-import openssh-client build-base"
	sshKeyScan "github.com"
	run "pip install --upgrade pip"
	run "pip install mkdocs-material pymdown-extensions pygments"
}

fs _runMkdocsBuild() {
	mkdocsMaterial
	run "mkdocs build -d /site" with option {
		dir "/mkdocs"
		mount fs {
			local "." with includePatterns("mkdocs.yml", "docs/", ".git")
		} "/mkdocs" with readonly
		mount generatedMarkdown "/mkdocs/docs/reference.md" with option {
			sourcePath "reference.md"
			readonly
		}
		mount scratch "/site" as build
	}
}

# Note this only publishes master on github, it does
# not publish local files
fs publish() {
	mkdocsMaterial
	run "mkdocs gh-deploy" with option {
		dir "/src"
		mount gitSource "/src"
		ssh
	}
}

fs _runHandleBars() {
	image "node:alpine"
	run "node src/compile.js" with option {
		dir "src"
		mount fs {
			local "docs/templates" with includePatterns("src", "reference")
		} "/src" with readonly
		mount fs {
			nodeModules fs {
				local "docs/templates" with includePatterns("package.json", "package-lock.json")
			}
		} "/src/node_modules" with readonly
		mount referenceJson "/src/data" with readonly
		mount scratch "/src/dist" as generatedMarkdown
	}
}

fs npmInstall(fs src) {
	image "node:alpine"
	run "npm install" with option {
		dir "/src"
		mount src "/src"
		mount scratch "/src/node_modules" as nodeModules
	}
}

fs _runDocGen() {
	scratch
	run "/docgen" "/language/builtin.hlb" "/out/reference.json" with option {
		mount fs {
			staticGoBuild "./cmd/docgen" fs {
				local "." with includePatterns("**/*.go", "go.mod", "go.sum")
			}
		} "/" with readonly
		mount fs {
			local "language" with includePatterns("builtin.hlb")
		} "language" with readonly
		mount scratch "/out" as referenceJson
	}
}

fs _runBuiltinGen() {
	scratch
	run "/builtingen" "/language/builtin.hlb" "/out/lookup.go" with option {
		mount fs {
			staticGoBuild "./cmd/builtingen" fs {
				local "." with includePatterns("**/*.go", "go.mod", "go.sum")
			}
		} "/" with readonly
		mount fs {
			local "language" with includePatterns("builtin.hlb")
		} "language" with readonly
		mount scratch "/out" as generatedBuiltin
	}
}

fs staticGoBuild(string package, fs src) {
	go.buildWithOptions src package option::template {
		stringField "base" "docker.elastic.co/beats-dev/golang-crossbuild"
		stringField "goBuildFlags" <<~EOM
			-ldflags "-extldflags -static"
		EOM
		stringField "goVersion" "1.21.3"
		stringField "platform" "linux"
		stringField "arch" "amd64"
	} option::run {
		env "CGO_ENABLED" "0"
	}
}

# TODO add this to a generic util module?
fs testSSH() {
	image "alpine"
	run "apk add -U openssh-client"
	sshKeyScan "github.com"
	run "ssh -q -T git@github.com" with ssh
}

# TODO add this to a generic util moduile
fs sshKeyScan(string host) {
	mkdir "/root/.ssh" 0o700
	run "ssh-keyscan ${host} >> ~/.ssh/known_hosts"
}

# TODO can we add this logic to a generic util module for publishing gh-pages?
fs _fetchGhPagesBranch() {
	image "alpine/git"
	sshKeyScan "github.com"
	run "git fetch origin gh-pages" with option {
		dir "/src"
		mount fs {
			git "git://github.com/openllb/hlb.git" "master" with keepGitDir
			# we have to recreate the .git/config because the one that 
			# comes from buildkit has invalid remote.origin.url and
			# no branch.master properties
			mkfile ".git/config" 0o644 <<-EOM
				[core]
					repositoryformatversion = 0
					filemode = true
					bare = false
					logallrefupdates = true
				[remote "origin"]
					url = git@github.com:openllb/hlb.git
					fetch = +refs/heads/*:refs/remotes/origin/*
				[branch "master"]
					remote = origin
					merge = refs/heads/master
			EOM
		} "/src" as gitSource
		ssh
	}
}
