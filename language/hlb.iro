#################################################################
## Iro
################################################################ 
##
## https://eeyo.io/iro/
##
################################################################

name = hlb
file_extensions [] = hlb;
textmate_uuid = 88c38584-8b5f-45be-93a6-e2c9da5b6e3f

styles [] {

   .string : style {
      color = #c679dd
      textmate_scope = string
      ace_scope = string
      pygments_scope = String
   }

   .constant : style {
      color = #c95b69
      textmate_scope = constant
      ace_scope = constant
      pygments_scope = Name.Constant
   }

   .variable : style {
      color = #98c373
      textmate_scope = variable
      ace_scope = variable
      pygments_scope = Name.Variable
   }

   .builtin : style {
      bold = true
      textmate_scope = variable.language
      ace_scope = variable.language
      pygments_scope = Name.Builtin
   }

   .keyword : style {
      color = #4096dd
      textmate_scope = keyword
      ace_scope = keyword
      pygments_scope = Keyword
   }

   .type : style {
      color = #ad7c09
      textmate_scope = entity.name.type
      ace_scope = entity.name.type
      pygments_scope = Keyword.Type
   }

   .comment : style {
      color = #8abeb7
      italic = true
      textmate_scope = comment
      ace_scope = comment
      pygments_scope = Comment.Single
   }

   .punctuation : style {
      color = red_2
      textmate_scope = punctuation
      ace_scope = punctuation
      pygments_scope = Punctuation
   }

   .illegal : style {
      color = white
      background_color = red
      textmate_scope = invalid
      ace_scope = invalid
      pygments_scope = Generic.Error         
   }

}

__TYPE \= (\bstring\b|\bint\b|\bbool\b|\bfs\b|\bgroup\b|\boption(?!::)\b|\boption::(?:copy|frontend|git|http|image|local|mkdir|mkfile|mount|rm|run|secret|ssh|template)\b)
__WHITESPACE \= (?:[\t ]+)
__IDENT \= (\b[a-zA-Z_][a-zA-Z0-9]*\b)
__KEYWORD \= (\b(import|export|from|as|with|variadic)\b)
__BOOL \= (\b(true|false)\b)
__NUMERIC \= (\b(0(b|B|o|O|x|X)[a-fA-F0-9]+)\b)
__DECIMAL \= (\b(0|[1-9][0-9]*)\b)
## exclusion list generated with:
## echo $(grep -E "case \"[^\"]+\":" codegen/codegen.go codegen/chain.go | awk -F'"' '{print $2}' | sort | uniq) | tr ' ' '|'
__NOT_BUILTIN \= (\b((?!(allowEmptyWildcard|allowNotFound|allowWildcard|cache|checksum|chmod|chown|contentsOnly|copy|createDestPath|createParents|createdTime|dir|dockerLoad|dockerPush|download|downloadDockerTarball|downloadOCITarball|downloadTarball|env|excludePatterns|filename|followPaths|followSymlinks|format|forward|frontend|gid|git|host|http|id|ignoreCache|image|includePatterns|input|insecure|keepGitDir|local|localEnv|localPaths|locked|mkdir|mkfile|mode|mount|network|node|opt|parallel|private|readonly|readonlyRootfs|resolve|rm|run|sandbox|scratch|secret|security|shared|sourcePath|ssh|stringField|target|template|tmpfs|uid|unix|unpack|unset|user|value)\b)[a-zA-Z_][a-zA-Z0-9]*\b))

contexts [] {

   main : context {
      : include "common";
      : pattern {
         regex \= $${__TYPE}
         styles [] = .type;
      }
      : pattern {
         regex \= $${__KEYWORD}
         styles [] = .keyword;
      }
      : push {
         regex \= $${__IDENT}(\()
         styles [] = .variable, .punctuation;
         context [] = params;
      }
      : pattern {
         regex \= (\))
         styles [] = .illegal;
      }
      : push {
         regex \= ($${__WHITESPACE}as$${__WHITESPACE})(\()
         styles [] = .keyword, .punctuation;
         context [] = params;
      }
      : pattern {
         regex \= (\))
         styles [] = .illegal;
      }
      : push {
         regex \= (\{)
         styles [] = .punctuation;
         context [] = block;
      }
      :pattern {
         regex \= (\})
         styles [] = .illegal;
      }
      : pattern {
         regex \= $${__IDENT}
         styles [] = .variable;
      }
   }
   
   common : context {
      : pattern {
         regex \= (#.*)
         styles [] = .comment;
      }
      : pattern {
         regex \= ($${__NUMERIC}|$${__DECIMAL}|$${__BOOL})
         styles [] = .constant;
      }
      : inline_push {
         regex \= (")
         styles [] = .punctuation;
         default_style = .string
         : pop {
            regex \= (")
            styles [] = .punctuation;
         }
      }
      : inline_push {
         regex \= (<<[-~]?)([A-Z]+)
         styles [] = .punctuation, .constant;
         default_style = .string
         : pop {
            regex \= (\2)
            styles [] = .constant;
         }
      }
   }
   
   params : context {
      : pop {
         regex \= (\))
         styles [] = .punctuation;
      }
      : pattern {
         regex \= (variadic)
         styles [] = .keyword;
      }
      : pattern {
         regex \= $${__TYPE}
         styles [] = .type;
      }
      : pattern {
         regex \= $${__IDENT}
         styles [] = .variable;
      }
   }
   binding : context {
      : pop {
         regex \= (\))
         styles [] = .punctuation;
      }
      : pattern {
         regex \= $${__IDENT}($${__WHITESPACE})$${__IDENT}
         styles [] = .builtin, .punctuation, .variable;
      }
   }

   block : context {
      : pop {
         regex \= (\})
         styles [] = .punctuation;
      }
      : include "common";
      : pattern {
         regex \= ($${__WHITESPACE}with$${__WHITESPACE})
         styles [] = .keyword;
      }
      : pattern {
         regex \= (as)($${__WHITESPACE})$${__IDENT}
         styles [] = .keyword, .punctuation, .variable;
      }
      : push {
         regex \= (as)($${__WHITESPACE})(\()
         styles [] = .keyword, .punctuation, .punctuation;
         context [] = binding;
      }
      : push {
         regex \= $${__TYPE}($${__WHITESPACE})(\{)
         styles [] = .type, .punctuation, .punctuation;
         context [] = block;
      }
      : pattern {
         regex \= $${__NOT_BUILTIN}
         styles [] = .variable;
      }
      : pattern {
         regex \= $${__IDENT}
         styles [] = .builtin;
      }
   }
}
